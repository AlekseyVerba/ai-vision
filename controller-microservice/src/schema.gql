# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddDeleteFavoriteProjectInput {
  id: Int!
}

type Ai {
  category: Category!
  category_id: Int!
  description: String
  examples: [AiExample!]!
  id: String!
  logo: String
  name: String!
  site: String
  twitter: String
}

type AiExample {
  ai: Ai!
  ai_id: Float!
  id: Float!
  type: String!
  value: String!
}

type Category {
  active: Boolean!
  id: Int!
  name: String!
}

input ConfirmNewPasswordInput {
  password: String!
  token: String!
}

input CreateAiInput {
  category_id: Int!
  description: String

  """Ai's examples"""
  examples: [Upload!]

  """Ai's logo"""
  logoPath: Upload
  name: String!
  site: String
  twitter: String
}

input CreateProjectInput {
  """Project's avatar"""
  avatar: Upload
  category_id: Int!
  description: String

  """Project's files"""
  files: [Upload!]
  price: Float!

  """Project's private files"""
  private_files: [Upload!]

  """Name ai source"""
  source: String

  """If tag does not exist, it will be created"""
  tags: [String!]!
  title: String!
}

input DeleteFileInput {
  id: Int!
}

input DeleteProjectInput {
  id: Int!
}

input GetAiInput {
  id: String!
}

input GetAisInput {
  category_id: Float
  limit: Int!
  offset: Int!
  search: String
}

input GetNextAndPreviousProjectInput {
  author_uid: String
  category_id: Float
  project_id: Int!
}

input GetProjectPrivateFileInput {
  project_id: Int!
}

input GetProjectsInput {
  category_id: Float
  limit: Int!
  offset: Int!
  search: String

  """There are available sorts: (new, old, random,top)"""
  sort: String = "date"
}

input GetUserInput {
  uid: String!
}

input GetUserProjectByUid {
  category_id: Float
  limit: Int!
  offset: Int!
  search: String

  """There are available sorts: (new, old, random,top)"""
  sort: String = "date"
  uid: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  """Add project to favorite projects"""
  addToFavorite(addToFavoriteData: AddDeleteFavoriteProjectInput!): Boolean!

  """Confirm new password"""
  confirmNewPassword(confirmNewPasswordData: ConfirmNewPasswordInput!): Success!

  """Confirm registration"""
  confirmRegistrationToken(token: String!): UserAuth!

  """Create ai"""
  createAi(createAiData: CreateAiInput!): Ai!

  """Create project"""
  createProject(createProjectData: CreateProjectInput!): Project!

  """Delete file from project"""
  deleteFile(deleteFileData: DeleteFileInput!): Boolean!

  """Delete project from favorite projects"""
  deleteFromFavorite(deleteFromFavoriteData: AddDeleteFavoriteProjectInput!): Boolean!

  """Delete project"""
  deleteProject(deleteProjectData: DeleteProjectInput!): Boolean!

  """Registration user"""
  registration(registrationData: RegistrationInput!): Success!

  """Resend token"""
  resendToken(resendTokenData: ResendTokenInput!): Success!

  """Reset password"""
  resetPassword(resetPasswordData: ResetPasswordInput!): Success!

  """Update project"""
  updateProject(updateProjectData: UpdateProjectInput!): Project!

  """Update current user"""
  updateUser(updateUserData: UpdateUserInput!): User!

  """Update user password"""
  updateUserPassword(updateUserPasswordData: UpdateUserPasswordInput!): Success!
}

type Project {
  author: User!
  author_uid: String!
  avatars: ProjectAvatars!
  category: Category!
  category_id: Int!
  createdAt: String!
  description: String
  files: [ProjectFile!]!
  id: Int!
  is_active: Boolean!
  price: Float!
  private_file: ProjectPrivateFile
  source: String
  tags: [Tag!]!
  title: String!
  updatedAt: String!
}

type ProjectAvatars {
  default: String!
  id: Float!
  middle: String!
  project: Project!
  project_id: Float!
}

type ProjectFile {
  id: Float!
  project: Project!
  project_id: Float!
  type: String!
  value: String!
}

type ProjectPrivateFile {
  id: Int!
  project_id: Int!
  value: String!
}

type Query {
  """Get current user"""
  checkAuth: User!

  """Get an ai"""
  getAi(getProjectData: GetAiInput!): Ai

  """Get ais"""
  getAis(aisQueryData: GetAisInput!): [Ai!]!

  """Get all categories"""
  getAllCategories: [Category!]!

  """Get next project"""
  getNextProjectById(getProjectData: GetNextAndPreviousProjectInput!): Project

  """Get previous project"""
  getPreviousProjectById(getProjectData: GetNextAndPreviousProjectInput!): Project

  """Get a project"""
  getProject(getProjectData: GetProjectPrivateFileInput!): Project

  """Get projects"""
  getProjects(getProjectData: GetProjectsInput!): [Project!]!
  getUser(getUserData: GetUserInput!): User

  """Get user favorite projects"""
  getUserFavoriteProjects(getProjectData: GetUserProjectByUid!): [Project!]!

  """Get user projects"""
  getUserProjects(getProjectData: GetUserProjectByUid!): [Project!]!

  """Log in"""
  login(loginData: LoginInput!): UserAuth!
}

"""Registration user"""
input RegistrationInput {
  email: String!
  name: String!
  password: String!
}

input ResendTokenInput {
  email: String!
  type: TokenTypesEnum!
}

input ResetPasswordInput {
  email: String!
}

type Success {
  value: String!
}

type Tag {
  id: Float!
  name: String!
  projects: [Project!]!
}

enum TokenTypesEnum {
  REGISTRATION
  RESET_PASSWORD
}

input UpdateProjectInput {
  """Project's avatar"""
  avatar: Upload
  category_id: Int
  description: String

  """Project's files"""
  files: [Upload!]
  id: Int!
  price: Float

  """Project's private files"""
  private_files: [Upload!]

  """Name ai source"""
  source: String

  """If tag does not exist, it will be created"""
  tags: [String!]
  title: String!
}

input UpdateUserInput {
  avatar: Upload!
  cover: Upload
  description: String
  facebook_link: String
  instagram_link: String
  name: String
  pinterest_link: String
  telegram_link: String
  twitter_link: String
}

input UpdateUserPasswordInput {
  password: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  avatars: UserAvatars!
  cover_path: String
  description: String
  email: String!
  facebook_link: String
  instagram_link: String
  is_active: Boolean!
  name: String
  pinterest_link: String
  projects: [Project!]!
  role: String!
  telegram_link: String
  twitter_link: String
  uid: String!
}

type UserAuth {
  jwt_token: String!
  user: User!
}

type UserAvatars {
  default: String
  id: Float!
  large: String
  middle: String
  small: String
  user: User!
  user_uid: String!
}